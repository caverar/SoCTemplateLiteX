//--------------------------------------------------------------------------------
// Auto-generated by Migen (7014bdc) & LiteX (9113c1a2) on 2021-04-04 23:10:38
//--------------------------------------------------------------------------------
module top(
	output reg serial_tx,
	input wire serial_rx,
	input wire clk100,
	input wire cpu_reset,
	output wire user_led0,
	output wire user_led1,
	output wire user_led2,
	output wire user_led3,
	input wire user_sw0,
	input wire user_sw1,
	input wire user_sw2,
	input wire user_sw3
);

reg __main___soccontroller_reset_storage = 1'd0;
reg __main___soccontroller_reset_re = 1'd0;
reg [31:0] __main___soccontroller_scratch_storage = 32'd305419896;
reg __main___soccontroller_scratch_re = 1'd0;
wire [31:0] __main___soccontroller_bus_errors_status;
wire __main___soccontroller_bus_errors_we;
reg __main___soccontroller_bus_errors_re = 1'd0;
wire __main___soccontroller_reset;
wire __main___soccontroller_bus_error;
reg [31:0] __main___soccontroller_bus_errors = 32'd0;
wire __main___cpu_reset;
reg [31:0] __main___cpu_interrupt = 32'd0;
wire [29:0] __main___cpu_ibus_adr;
wire [31:0] __main___cpu_ibus_dat_w;
wire [31:0] __main___cpu_ibus_dat_r;
wire [3:0] __main___cpu_ibus_sel;
wire __main___cpu_ibus_cyc;
wire __main___cpu_ibus_stb;
wire __main___cpu_ibus_ack;
wire __main___cpu_ibus_we;
wire [2:0] __main___cpu_ibus_cti;
wire [1:0] __main___cpu_ibus_bte;
wire __main___cpu_ibus_err;
wire [29:0] __main___cpu_dbus_adr;
wire [31:0] __main___cpu_dbus_dat_w;
wire [31:0] __main___cpu_dbus_dat_r;
wire [3:0] __main___cpu_dbus_sel;
wire __main___cpu_dbus_cyc;
wire __main___cpu_dbus_stb;
wire __main___cpu_dbus_ack;
wire __main___cpu_dbus_we;
wire [2:0] __main___cpu_dbus_cti;
wire [1:0] __main___cpu_dbus_bte;
wire __main___cpu_dbus_err;
reg [31:0] __main___vexriscv = 32'd0;
wire [29:0] __main___ram_bus_adr;
wire [31:0] __main___ram_bus_dat_w;
wire [31:0] __main___ram_bus_dat_r;
wire [3:0] __main___ram_bus_sel;
wire __main___ram_bus_cyc;
wire __main___ram_bus_stb;
reg __main___ram_bus_ack = 1'd0;
wire __main___ram_bus_we;
wire [2:0] __main___ram_bus_cti;
wire [1:0] __main___ram_bus_bte;
reg __main___ram_bus_err = 1'd0;
wire [12:0] __main___adr;
wire [31:0] __main___dat_r;
wire [29:0] __main___interface0_ram_bus_adr;
wire [31:0] __main___interface0_ram_bus_dat_w;
wire [31:0] __main___interface0_ram_bus_dat_r;
wire [3:0] __main___interface0_ram_bus_sel;
wire __main___interface0_ram_bus_cyc;
wire __main___interface0_ram_bus_stb;
reg __main___interface0_ram_bus_ack = 1'd0;
wire __main___interface0_ram_bus_we;
wire [2:0] __main___interface0_ram_bus_cti;
wire [1:0] __main___interface0_ram_bus_bte;
reg __main___interface0_ram_bus_err = 1'd0;
wire [10:0] __main___sram0_adr;
wire [31:0] __main___sram0_dat_r;
reg [3:0] __main___sram0_we = 4'd0;
wire [31:0] __main___sram0_dat_w;
wire [29:0] __main___interface1_ram_bus_adr;
wire [31:0] __main___interface1_ram_bus_dat_w;
wire [31:0] __main___interface1_ram_bus_dat_r;
wire [3:0] __main___interface1_ram_bus_sel;
wire __main___interface1_ram_bus_cyc;
wire __main___interface1_ram_bus_stb;
reg __main___interface1_ram_bus_ack = 1'd0;
wire __main___interface1_ram_bus_we;
wire [2:0] __main___interface1_ram_bus_cti;
wire [1:0] __main___interface1_ram_bus_bte;
reg __main___interface1_ram_bus_err = 1'd0;
wire [11:0] __main___sram1_adr;
wire [31:0] __main___sram1_dat_r;
reg [3:0] __main___sram1_we = 4'd0;
wire [31:0] __main___sram1_dat_w;
wire __main___tx_sink_valid;
reg __main___tx_sink_ready = 1'd0;
wire __main___tx_sink_first;
wire __main___tx_sink_last;
wire [7:0] __main___tx_sink_payload_data;
reg [7:0] __main___tx_data = 8'd0;
reg [3:0] __main___tx_count = 4'd0;
reg __main___tx_enable = 1'd0;
reg [31:0] __main___tx_tick = 32'd0;
reg [31:0] __main___tx_phase = 32'd0;
reg __main___rx_source_valid = 1'd0;
wire __main___rx_source_ready;
reg __main___rx_source_first = 1'd0;
reg __main___rx_source_last = 1'd0;
reg [7:0] __main___rx_source_payload_data = 8'd0;
reg [7:0] __main___rx_data = 8'd0;
reg [3:0] __main___rx_count = 4'd0;
reg __main___rx_enable = 1'd0;
reg [31:0] __main___rx_tick = 32'd0;
reg [31:0] __main___rx_phase = 32'd0;
wire __main___rx_rx;
reg __main___rx_rx_d = 1'd0;
reg __main___uart_rxtx_re = 1'd0;
wire [7:0] __main___uart_rxtx_r;
reg __main___uart_rxtx_we = 1'd0;
wire [7:0] __main___uart_rxtx_w;
wire __main___uart_txfull_status;
wire __main___uart_txfull_we;
reg __main___uart_txfull_re = 1'd0;
wire __main___uart_rxempty_status;
wire __main___uart_rxempty_we;
reg __main___uart_rxempty_re = 1'd0;
wire __main___uart_irq;
wire __main___uart_tx_status;
reg __main___uart_tx_pending = 1'd0;
wire __main___uart_tx_trigger;
reg __main___uart_tx_clear = 1'd0;
reg __main___uart_tx_trigger_d = 1'd0;
wire __main___uart_rx_status;
reg __main___uart_rx_pending = 1'd0;
wire __main___uart_rx_trigger;
reg __main___uart_rx_clear = 1'd0;
reg __main___uart_rx_trigger_d = 1'd0;
wire __main___uart_tx0;
wire __main___uart_rx0;
reg [1:0] __main___uart_status_status = 2'd0;
wire __main___uart_status_we;
reg __main___uart_status_re = 1'd0;
wire __main___uart_tx1;
wire __main___uart_rx1;
reg [1:0] __main___uart_pending_status = 2'd0;
wire __main___uart_pending_we;
reg __main___uart_pending_re = 1'd0;
reg [1:0] __main___uart_pending_r = 2'd0;
wire __main___uart_tx2;
wire __main___uart_rx2;
reg [1:0] __main___uart_enable_storage = 2'd0;
reg __main___uart_enable_re = 1'd0;
wire __main___uart_txempty_status;
wire __main___uart_txempty_we;
reg __main___uart_txempty_re = 1'd0;
wire __main___uart_rxfull_status;
wire __main___uart_rxfull_we;
reg __main___uart_rxfull_re = 1'd0;
wire __main___uart_uart_sink_valid;
wire __main___uart_uart_sink_ready;
wire __main___uart_uart_sink_first;
wire __main___uart_uart_sink_last;
wire [7:0] __main___uart_uart_sink_payload_data;
wire __main___uart_uart_source_valid;
wire __main___uart_uart_source_ready;
wire __main___uart_uart_source_first;
wire __main___uart_uart_source_last;
wire [7:0] __main___uart_uart_source_payload_data;
wire __main___uart_tx_fifo_sink_valid;
wire __main___uart_tx_fifo_sink_ready;
reg __main___uart_tx_fifo_sink_first = 1'd0;
reg __main___uart_tx_fifo_sink_last = 1'd0;
wire [7:0] __main___uart_tx_fifo_sink_payload_data;
wire __main___uart_tx_fifo_source_valid;
wire __main___uart_tx_fifo_source_ready;
wire __main___uart_tx_fifo_source_first;
wire __main___uart_tx_fifo_source_last;
wire [7:0] __main___uart_tx_fifo_source_payload_data;
wire __main___uart_tx_fifo_re;
reg __main___uart_tx_fifo_readable = 1'd0;
wire __main___uart_tx_fifo_syncfifo_we;
wire __main___uart_tx_fifo_syncfifo_writable;
wire __main___uart_tx_fifo_syncfifo_re;
wire __main___uart_tx_fifo_syncfifo_readable;
wire [9:0] __main___uart_tx_fifo_syncfifo_din;
wire [9:0] __main___uart_tx_fifo_syncfifo_dout;
reg [4:0] __main___uart_tx_fifo_level0 = 5'd0;
reg __main___uart_tx_fifo_replace = 1'd0;
reg [3:0] __main___uart_tx_fifo_produce = 4'd0;
reg [3:0] __main___uart_tx_fifo_consume = 4'd0;
reg [3:0] __main___uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] __main___uart_tx_fifo_wrport_dat_r;
wire __main___uart_tx_fifo_wrport_we;
wire [9:0] __main___uart_tx_fifo_wrport_dat_w;
wire __main___uart_tx_fifo_do_read;
wire [3:0] __main___uart_tx_fifo_rdport_adr;
wire [9:0] __main___uart_tx_fifo_rdport_dat_r;
wire __main___uart_tx_fifo_rdport_re;
wire [4:0] __main___uart_tx_fifo_level1;
wire [7:0] __main___uart_tx_fifo_fifo_in_payload_data;
wire __main___uart_tx_fifo_fifo_in_first;
wire __main___uart_tx_fifo_fifo_in_last;
wire [7:0] __main___uart_tx_fifo_fifo_out_payload_data;
wire __main___uart_tx_fifo_fifo_out_first;
wire __main___uart_tx_fifo_fifo_out_last;
wire __main___uart_rx_fifo_sink_valid;
wire __main___uart_rx_fifo_sink_ready;
wire __main___uart_rx_fifo_sink_first;
wire __main___uart_rx_fifo_sink_last;
wire [7:0] __main___uart_rx_fifo_sink_payload_data;
wire __main___uart_rx_fifo_source_valid;
wire __main___uart_rx_fifo_source_ready;
wire __main___uart_rx_fifo_source_first;
wire __main___uart_rx_fifo_source_last;
wire [7:0] __main___uart_rx_fifo_source_payload_data;
wire __main___uart_rx_fifo_re;
reg __main___uart_rx_fifo_readable = 1'd0;
wire __main___uart_rx_fifo_syncfifo_we;
wire __main___uart_rx_fifo_syncfifo_writable;
wire __main___uart_rx_fifo_syncfifo_re;
wire __main___uart_rx_fifo_syncfifo_readable;
wire [9:0] __main___uart_rx_fifo_syncfifo_din;
wire [9:0] __main___uart_rx_fifo_syncfifo_dout;
reg [4:0] __main___uart_rx_fifo_level0 = 5'd0;
reg __main___uart_rx_fifo_replace = 1'd0;
reg [3:0] __main___uart_rx_fifo_produce = 4'd0;
reg [3:0] __main___uart_rx_fifo_consume = 4'd0;
reg [3:0] __main___uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] __main___uart_rx_fifo_wrport_dat_r;
wire __main___uart_rx_fifo_wrport_we;
wire [9:0] __main___uart_rx_fifo_wrport_dat_w;
wire __main___uart_rx_fifo_do_read;
wire [3:0] __main___uart_rx_fifo_rdport_adr;
wire [9:0] __main___uart_rx_fifo_rdport_dat_r;
wire __main___uart_rx_fifo_rdport_re;
wire [4:0] __main___uart_rx_fifo_level1;
wire [7:0] __main___uart_rx_fifo_fifo_in_payload_data;
wire __main___uart_rx_fifo_fifo_in_first;
wire __main___uart_rx_fifo_fifo_in_last;
wire [7:0] __main___uart_rx_fifo_fifo_out_payload_data;
wire __main___uart_rx_fifo_fifo_out_first;
wire __main___uart_rx_fifo_fifo_out_last;
reg [31:0] __main___timer_load_storage = 32'd0;
reg __main___timer_load_re = 1'd0;
reg [31:0] __main___timer_reload_storage = 32'd0;
reg __main___timer_reload_re = 1'd0;
reg __main___timer_en_storage = 1'd0;
reg __main___timer_en_re = 1'd0;
reg __main___timer_update_value_storage = 1'd0;
reg __main___timer_update_value_re = 1'd0;
reg [31:0] __main___timer_value_status = 32'd0;
wire __main___timer_value_we;
reg __main___timer_value_re = 1'd0;
wire __main___timer_irq;
wire __main___timer_zero_status;
reg __main___timer_zero_pending = 1'd0;
wire __main___timer_zero_trigger;
reg __main___timer_zero_clear = 1'd0;
reg __main___timer_zero_trigger_d = 1'd0;
wire __main___timer_zero0;
wire __main___timer_status_status;
wire __main___timer_status_we;
reg __main___timer_status_re = 1'd0;
wire __main___timer_zero1;
wire __main___timer_pending_status;
wire __main___timer_pending_we;
reg __main___timer_pending_re = 1'd0;
reg __main___timer_pending_r = 1'd0;
wire __main___timer_zero2;
reg __main___timer_enable_storage = 1'd0;
reg __main___timer_enable_re = 1'd0;
reg [31:0] __main___timer_value = 32'd0;
(* dont_touch = "true" *) wire sys_clk;
wire sys_rst;
(* dont_touch = "true" *) wire app1_clk;
wire app1_rst;
reg __main___reset = 1'd0;
wire __main___locked;
wire __main___clkin;
wire __main___clkout0;
wire __main___clkout_buf0;
wire __main___clkout1;
wire __main___clkout_buf1;
wire __main___irq;
wire __main___switchIRQ_status;
reg __main___switchIRQ_pending = 1'd0;
wire __main___switchIRQ_trigger;
reg __main___switchIRQ_clear = 1'd0;
reg __main___switchIRQ_trigger_d = 1'd0;
wire __main___CLK;
wire __main___RST;
wire [3:0] __main___SW;
wire [3:0] __main___LED;
wire __main___IRQ;
reg [3:0] __main___LED_REG_storage = 4'd0;
reg __main___LED_REG_re = 1'd0;
wire [3:0] __main___SW_REG_status;
wire __main___SW_REG_we;
reg __main___SW_REG_re = 1'd0;
wire [3:0] __main___SW_REG_WIRE;
reg builder_rs232phytx_state = 1'd0;
reg builder_rs232phytx_next_state = 1'd0;
reg [3:0] __main___tx_count_rs232phytx_next_value0 = 4'd0;
reg __main___tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg __main___serial_tx_rs232phytx_next_value1 = 1'd0;
reg __main___serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg [7:0] __main___tx_data_rs232phytx_next_value2 = 8'd0;
reg __main___tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg builder_rs232phyrx_state = 1'd0;
reg builder_rs232phyrx_next_state = 1'd0;
reg [3:0] __main___rx_count_rs232phyrx_next_value0 = 4'd0;
reg __main___rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg [7:0] __main___rx_data_rs232phyrx_next_value1 = 8'd0;
reg __main___rx_data_rs232phyrx_next_value_ce1 = 1'd0;
wire builder_reset0;
wire builder_reset1;
wire builder_reset2;
wire builder_reset3;
wire builder_reset4;
wire builder_reset5;
wire builder_reset6;
wire builder_reset7;
wire builder_mmcm_fb;
wire builder_switchIRQ0;
wire builder_status_status;
wire builder_status_we;
reg builder_status_re = 1'd0;
wire builder_switchIRQ1;
wire builder_pending_status;
wire builder_pending_we;
reg builder_pending_re = 1'd0;
reg builder_pending_r = 1'd0;
wire builder_switchIRQ2;
reg builder_enable_storage = 1'd0;
reg builder_enable_re = 1'd0;
reg [13:0] builder_basesoc_adr = 14'd0;
reg builder_basesoc_we = 1'd0;
reg [31:0] builder_basesoc_dat_w = 32'd0;
wire [31:0] builder_basesoc_dat_r;
wire [29:0] builder_basesoc_wishbone_adr;
wire [31:0] builder_basesoc_wishbone_dat_w;
reg [31:0] builder_basesoc_wishbone_dat_r = 32'd0;
wire [3:0] builder_basesoc_wishbone_sel;
wire builder_basesoc_wishbone_cyc;
wire builder_basesoc_wishbone_stb;
reg builder_basesoc_wishbone_ack = 1'd0;
wire builder_basesoc_wishbone_we;
wire [2:0] builder_basesoc_wishbone_cti;
wire [1:0] builder_basesoc_wishbone_bte;
reg builder_basesoc_wishbone_err = 1'd0;
wire [29:0] builder_shared_adr;
wire [31:0] builder_shared_dat_w;
reg [31:0] builder_shared_dat_r = 32'd0;
wire [3:0] builder_shared_sel;
wire builder_shared_cyc;
wire builder_shared_stb;
reg builder_shared_ack = 1'd0;
wire builder_shared_we;
wire [2:0] builder_shared_cti;
wire [1:0] builder_shared_bte;
wire builder_shared_err;
wire [1:0] builder_request;
reg builder_grant = 1'd0;
reg [3:0] builder_slave_sel = 4'd0;
reg [3:0] builder_slave_sel_r = 4'd0;
reg builder_error = 1'd0;
wire builder_wait;
wire builder_done;
reg [19:0] builder_count = 20'd1000000;
wire [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
wire builder_csr_bankarray_interface0_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
reg [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg builder_csr_bankarray_csrbank0_LED_REG0_re = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank0_LED_REG0_r;
reg builder_csr_bankarray_csrbank0_LED_REG0_we = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank0_LED_REG0_w;
reg builder_csr_bankarray_csrbank0_SW_REG_re = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank0_SW_REG_r;
reg builder_csr_bankarray_csrbank0_SW_REG_we = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank0_SW_REG_w;
reg builder_csr_bankarray_csrbank0_ev_status_re = 1'd0;
wire builder_csr_bankarray_csrbank0_ev_status_r;
reg builder_csr_bankarray_csrbank0_ev_status_we = 1'd0;
wire builder_csr_bankarray_csrbank0_ev_status_w;
reg builder_csr_bankarray_csrbank0_ev_pending_re = 1'd0;
wire builder_csr_bankarray_csrbank0_ev_pending_r;
reg builder_csr_bankarray_csrbank0_ev_pending_we = 1'd0;
wire builder_csr_bankarray_csrbank0_ev_pending_w;
reg builder_csr_bankarray_csrbank0_ev_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank0_ev_enable0_r;
reg builder_csr_bankarray_csrbank0_ev_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank0_ev_enable0_w;
wire builder_csr_bankarray_csrbank0_sel;
wire [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
wire builder_csr_bankarray_interface1_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
reg [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg builder_csr_bankarray_csrbank1_reset0_re = 1'd0;
wire builder_csr_bankarray_csrbank1_reset0_r;
reg builder_csr_bankarray_csrbank1_reset0_we = 1'd0;
wire builder_csr_bankarray_csrbank1_reset0_w;
reg builder_csr_bankarray_csrbank1_scratch0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_scratch0_r;
reg builder_csr_bankarray_csrbank1_scratch0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_scratch0_w;
reg builder_csr_bankarray_csrbank1_bus_errors_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_bus_errors_r;
reg builder_csr_bankarray_csrbank1_bus_errors_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_bus_errors_w;
wire builder_csr_bankarray_csrbank1_sel;
wire [13:0] builder_csr_bankarray_sram_bus_adr;
wire builder_csr_bankarray_sram_bus_we;
wire [31:0] builder_csr_bankarray_sram_bus_dat_w;
reg [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] builder_csr_bankarray_adr;
wire [7:0] builder_csr_bankarray_dat_r;
wire builder_csr_bankarray_sel;
reg builder_csr_bankarray_sel_r = 1'd0;
wire [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
wire builder_csr_bankarray_interface2_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
reg [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg builder_csr_bankarray_csrbank2_load0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_load0_r;
reg builder_csr_bankarray_csrbank2_load0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_load0_w;
reg builder_csr_bankarray_csrbank2_reload0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_reload0_r;
reg builder_csr_bankarray_csrbank2_reload0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_reload0_w;
reg builder_csr_bankarray_csrbank2_en0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_en0_r;
reg builder_csr_bankarray_csrbank2_en0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_en0_w;
reg builder_csr_bankarray_csrbank2_update_value0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_update_value0_r;
reg builder_csr_bankarray_csrbank2_update_value0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_update_value0_w;
reg builder_csr_bankarray_csrbank2_value_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_value_r;
reg builder_csr_bankarray_csrbank2_value_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_value_w;
reg builder_csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_status_r;
reg builder_csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_status_w;
reg builder_csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_pending_r;
reg builder_csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_pending_w;
reg builder_csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_enable0_r;
reg builder_csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_enable0_w;
wire builder_csr_bankarray_csrbank2_sel;
wire [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
wire builder_csr_bankarray_interface3_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
reg [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg builder_csr_bankarray_csrbank3_txfull_re = 1'd0;
wire builder_csr_bankarray_csrbank3_txfull_r;
reg builder_csr_bankarray_csrbank3_txfull_we = 1'd0;
wire builder_csr_bankarray_csrbank3_txfull_w;
reg builder_csr_bankarray_csrbank3_rxempty_re = 1'd0;
wire builder_csr_bankarray_csrbank3_rxempty_r;
reg builder_csr_bankarray_csrbank3_rxempty_we = 1'd0;
wire builder_csr_bankarray_csrbank3_rxempty_w;
reg builder_csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_status_r;
reg builder_csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_status_w;
reg builder_csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_pending_r;
reg builder_csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_pending_w;
reg builder_csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_enable0_r;
reg builder_csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_enable0_w;
reg builder_csr_bankarray_csrbank3_txempty_re = 1'd0;
wire builder_csr_bankarray_csrbank3_txempty_r;
reg builder_csr_bankarray_csrbank3_txempty_we = 1'd0;
wire builder_csr_bankarray_csrbank3_txempty_w;
reg builder_csr_bankarray_csrbank3_rxfull_re = 1'd0;
wire builder_csr_bankarray_csrbank3_rxfull_r;
reg builder_csr_bankarray_csrbank3_rxfull_we = 1'd0;
wire builder_csr_bankarray_csrbank3_rxfull_w;
wire builder_csr_bankarray_csrbank3_sel;
wire [13:0] builder_csr_interconnect_adr;
wire builder_csr_interconnect_we;
wire [31:0] builder_csr_interconnect_dat_w;
wire [31:0] builder_csr_interconnect_dat_r;
reg builder_state = 1'd0;
reg builder_next_state = 1'd0;
reg [29:0] builder_array_muxed0 = 30'd0;
reg [31:0] builder_array_muxed1 = 32'd0;
reg [3:0] builder_array_muxed2 = 4'd0;
reg builder_array_muxed3 = 1'd0;
reg builder_array_muxed4 = 1'd0;
reg builder_array_muxed5 = 1'd0;
reg [2:0] builder_array_muxed6 = 3'd0;
reg [1:0] builder_array_muxed7 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg builder_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg builder_regs1 = 1'd0;

assign __main___cpu_reset = __main___soccontroller_reset;
assign __main___CLK = sys_clk;
assign __main___RST = sys_rst;
assign __main___SW = {user_sw3, user_sw2, user_sw1, user_sw0};
assign {user_led3, user_led2, user_led1, user_led0} = __main___LED;
assign __main___soccontroller_bus_error = builder_error;
always @(*) begin
	__main___cpu_interrupt <= 32'd0;
	__main___cpu_interrupt[7] <= __main___irq;
	__main___cpu_interrupt[1] <= __main___timer_irq;
	__main___cpu_interrupt[0] <= __main___uart_irq;
end
assign __main___soccontroller_reset = __main___soccontroller_reset_re;
assign __main___soccontroller_bus_errors_status = __main___soccontroller_bus_errors;
assign __main___adr = __main___ram_bus_adr[12:0];
assign __main___ram_bus_dat_r = __main___dat_r;
always @(*) begin
	__main___sram0_we <= 4'd0;
	__main___sram0_we[0] <= (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & __main___interface0_ram_bus_we) & __main___interface0_ram_bus_sel[0]);
	__main___sram0_we[1] <= (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & __main___interface0_ram_bus_we) & __main___interface0_ram_bus_sel[1]);
	__main___sram0_we[2] <= (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & __main___interface0_ram_bus_we) & __main___interface0_ram_bus_sel[2]);
	__main___sram0_we[3] <= (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & __main___interface0_ram_bus_we) & __main___interface0_ram_bus_sel[3]);
end
assign __main___sram0_adr = __main___interface0_ram_bus_adr[10:0];
assign __main___interface0_ram_bus_dat_r = __main___sram0_dat_r;
assign __main___sram0_dat_w = __main___interface0_ram_bus_dat_w;
always @(*) begin
	__main___sram1_we <= 4'd0;
	__main___sram1_we[0] <= (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & __main___interface1_ram_bus_we) & __main___interface1_ram_bus_sel[0]);
	__main___sram1_we[1] <= (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & __main___interface1_ram_bus_we) & __main___interface1_ram_bus_sel[1]);
	__main___sram1_we[2] <= (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & __main___interface1_ram_bus_we) & __main___interface1_ram_bus_sel[2]);
	__main___sram1_we[3] <= (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & __main___interface1_ram_bus_we) & __main___interface1_ram_bus_sel[3]);
end
assign __main___sram1_adr = __main___interface1_ram_bus_adr[11:0];
assign __main___interface1_ram_bus_dat_r = __main___sram1_dat_r;
assign __main___sram1_dat_w = __main___interface1_ram_bus_dat_w;
always @(*) begin
	__main___tx_enable <= 1'd0;
	builder_rs232phytx_next_state <= 1'd0;
	__main___tx_count_rs232phytx_next_value0 <= 4'd0;
	__main___tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	__main___serial_tx_rs232phytx_next_value1 <= 1'd0;
	__main___serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
	__main___tx_data_rs232phytx_next_value2 <= 8'd0;
	__main___tx_sink_ready <= 1'd0;
	__main___tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	builder_rs232phytx_next_state <= builder_rs232phytx_state;
	case (builder_rs232phytx_state)
		1'd1: begin
			__main___tx_enable <= 1'd1;
			if (__main___tx_tick) begin
				__main___serial_tx_rs232phytx_next_value1 <= __main___tx_data;
				__main___serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				__main___tx_count_rs232phytx_next_value0 <= (__main___tx_count + 1'd1);
				__main___tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				__main___tx_data_rs232phytx_next_value2 <= {1'd1, __main___tx_data[7:1]};
				__main___tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((__main___tx_count == 4'd9)) begin
					__main___tx_sink_ready <= 1'd1;
					builder_rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			__main___tx_count_rs232phytx_next_value0 <= 1'd0;
			__main___tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			__main___serial_tx_rs232phytx_next_value1 <= 1'd1;
			__main___serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (__main___tx_sink_valid) begin
				__main___serial_tx_rs232phytx_next_value1 <= 1'd0;
				__main___serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				__main___tx_data_rs232phytx_next_value2 <= __main___tx_sink_payload_data;
				__main___tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				builder_rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	__main___rx_source_payload_data <= 8'd0;
	__main___rx_enable <= 1'd0;
	builder_rs232phyrx_next_state <= 1'd0;
	__main___rx_source_valid <= 1'd0;
	__main___rx_count_rs232phyrx_next_value0 <= 4'd0;
	__main___rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	__main___rx_data_rs232phyrx_next_value1 <= 8'd0;
	__main___rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
	case (builder_rs232phyrx_state)
		1'd1: begin
			__main___rx_enable <= 1'd1;
			if (__main___rx_tick) begin
				__main___rx_count_rs232phyrx_next_value0 <= (__main___rx_count + 1'd1);
				__main___rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				__main___rx_data_rs232phyrx_next_value1 <= {__main___rx_rx, __main___rx_data[7:1]};
				__main___rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((__main___rx_count == 4'd9)) begin
					__main___rx_source_valid <= (__main___rx_rx == 1'd1);
					__main___rx_source_payload_data <= __main___rx_data;
					builder_rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			__main___rx_count_rs232phyrx_next_value0 <= 1'd0;
			__main___rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((__main___rx_rx == 1'd0) & (__main___rx_rx_d == 1'd1))) begin
				builder_rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign __main___uart_uart_sink_valid = __main___rx_source_valid;
assign __main___rx_source_ready = __main___uart_uart_sink_ready;
assign __main___uart_uart_sink_first = __main___rx_source_first;
assign __main___uart_uart_sink_last = __main___rx_source_last;
assign __main___uart_uart_sink_payload_data = __main___rx_source_payload_data;
assign __main___tx_sink_valid = __main___uart_uart_source_valid;
assign __main___uart_uart_source_ready = __main___tx_sink_ready;
assign __main___tx_sink_first = __main___uart_uart_source_first;
assign __main___tx_sink_last = __main___uart_uart_source_last;
assign __main___tx_sink_payload_data = __main___uart_uart_source_payload_data;
assign __main___uart_tx_fifo_sink_valid = __main___uart_rxtx_re;
assign __main___uart_tx_fifo_sink_payload_data = __main___uart_rxtx_r;
assign __main___uart_txfull_status = (~__main___uart_tx_fifo_sink_ready);
assign __main___uart_txempty_status = (~__main___uart_tx_fifo_source_valid);
assign __main___uart_uart_source_valid = __main___uart_tx_fifo_source_valid;
assign __main___uart_tx_fifo_source_ready = __main___uart_uart_source_ready;
assign __main___uart_uart_source_first = __main___uart_tx_fifo_source_first;
assign __main___uart_uart_source_last = __main___uart_tx_fifo_source_last;
assign __main___uart_uart_source_payload_data = __main___uart_tx_fifo_source_payload_data;
assign __main___uart_tx_trigger = (~__main___uart_tx_fifo_sink_ready);
assign __main___uart_rx_fifo_sink_valid = __main___uart_uart_sink_valid;
assign __main___uart_uart_sink_ready = __main___uart_rx_fifo_sink_ready;
assign __main___uart_rx_fifo_sink_first = __main___uart_uart_sink_first;
assign __main___uart_rx_fifo_sink_last = __main___uart_uart_sink_last;
assign __main___uart_rx_fifo_sink_payload_data = __main___uart_uart_sink_payload_data;
assign __main___uart_rxempty_status = (~__main___uart_rx_fifo_source_valid);
assign __main___uart_rxfull_status = (~__main___uart_rx_fifo_sink_ready);
assign __main___uart_rxtx_w = __main___uart_rx_fifo_source_payload_data;
assign __main___uart_rx_fifo_source_ready = (__main___uart_rx_clear | (1'd0 & __main___uart_rxtx_we));
assign __main___uart_rx_trigger = (~__main___uart_rx_fifo_source_valid);
assign __main___uart_tx0 = __main___uart_tx_status;
assign __main___uart_tx1 = __main___uart_tx_pending;
always @(*) begin
	__main___uart_tx_clear <= 1'd0;
	if ((__main___uart_pending_re & __main___uart_pending_r[0])) begin
		__main___uart_tx_clear <= 1'd1;
	end
end
assign __main___uart_rx0 = __main___uart_rx_status;
assign __main___uart_rx1 = __main___uart_rx_pending;
always @(*) begin
	__main___uart_rx_clear <= 1'd0;
	if ((__main___uart_pending_re & __main___uart_pending_r[1])) begin
		__main___uart_rx_clear <= 1'd1;
	end
end
assign __main___uart_irq = ((__main___uart_pending_status[0] & __main___uart_enable_storage[0]) | (__main___uart_pending_status[1] & __main___uart_enable_storage[1]));
assign __main___uart_tx_status = __main___uart_tx_trigger;
assign __main___uart_rx_status = __main___uart_rx_trigger;
assign __main___uart_tx_fifo_syncfifo_din = {__main___uart_tx_fifo_fifo_in_last, __main___uart_tx_fifo_fifo_in_first, __main___uart_tx_fifo_fifo_in_payload_data};
assign {__main___uart_tx_fifo_fifo_out_last, __main___uart_tx_fifo_fifo_out_first, __main___uart_tx_fifo_fifo_out_payload_data} = __main___uart_tx_fifo_syncfifo_dout;
assign __main___uart_tx_fifo_sink_ready = __main___uart_tx_fifo_syncfifo_writable;
assign __main___uart_tx_fifo_syncfifo_we = __main___uart_tx_fifo_sink_valid;
assign __main___uart_tx_fifo_fifo_in_first = __main___uart_tx_fifo_sink_first;
assign __main___uart_tx_fifo_fifo_in_last = __main___uart_tx_fifo_sink_last;
assign __main___uart_tx_fifo_fifo_in_payload_data = __main___uart_tx_fifo_sink_payload_data;
assign __main___uart_tx_fifo_source_valid = __main___uart_tx_fifo_readable;
assign __main___uart_tx_fifo_source_first = __main___uart_tx_fifo_fifo_out_first;
assign __main___uart_tx_fifo_source_last = __main___uart_tx_fifo_fifo_out_last;
assign __main___uart_tx_fifo_source_payload_data = __main___uart_tx_fifo_fifo_out_payload_data;
assign __main___uart_tx_fifo_re = __main___uart_tx_fifo_source_ready;
assign __main___uart_tx_fifo_syncfifo_re = (__main___uart_tx_fifo_syncfifo_readable & ((~__main___uart_tx_fifo_readable) | __main___uart_tx_fifo_re));
assign __main___uart_tx_fifo_level1 = (__main___uart_tx_fifo_level0 + __main___uart_tx_fifo_readable);
always @(*) begin
	__main___uart_tx_fifo_wrport_adr <= 4'd0;
	if (__main___uart_tx_fifo_replace) begin
		__main___uart_tx_fifo_wrport_adr <= (__main___uart_tx_fifo_produce - 1'd1);
	end else begin
		__main___uart_tx_fifo_wrport_adr <= __main___uart_tx_fifo_produce;
	end
end
assign __main___uart_tx_fifo_wrport_dat_w = __main___uart_tx_fifo_syncfifo_din;
assign __main___uart_tx_fifo_wrport_we = (__main___uart_tx_fifo_syncfifo_we & (__main___uart_tx_fifo_syncfifo_writable | __main___uart_tx_fifo_replace));
assign __main___uart_tx_fifo_do_read = (__main___uart_tx_fifo_syncfifo_readable & __main___uart_tx_fifo_syncfifo_re);
assign __main___uart_tx_fifo_rdport_adr = __main___uart_tx_fifo_consume;
assign __main___uart_tx_fifo_syncfifo_dout = __main___uart_tx_fifo_rdport_dat_r;
assign __main___uart_tx_fifo_rdport_re = __main___uart_tx_fifo_do_read;
assign __main___uart_tx_fifo_syncfifo_writable = (__main___uart_tx_fifo_level0 != 5'd16);
assign __main___uart_tx_fifo_syncfifo_readable = (__main___uart_tx_fifo_level0 != 1'd0);
assign __main___uart_rx_fifo_syncfifo_din = {__main___uart_rx_fifo_fifo_in_last, __main___uart_rx_fifo_fifo_in_first, __main___uart_rx_fifo_fifo_in_payload_data};
assign {__main___uart_rx_fifo_fifo_out_last, __main___uart_rx_fifo_fifo_out_first, __main___uart_rx_fifo_fifo_out_payload_data} = __main___uart_rx_fifo_syncfifo_dout;
assign __main___uart_rx_fifo_sink_ready = __main___uart_rx_fifo_syncfifo_writable;
assign __main___uart_rx_fifo_syncfifo_we = __main___uart_rx_fifo_sink_valid;
assign __main___uart_rx_fifo_fifo_in_first = __main___uart_rx_fifo_sink_first;
assign __main___uart_rx_fifo_fifo_in_last = __main___uart_rx_fifo_sink_last;
assign __main___uart_rx_fifo_fifo_in_payload_data = __main___uart_rx_fifo_sink_payload_data;
assign __main___uart_rx_fifo_source_valid = __main___uart_rx_fifo_readable;
assign __main___uart_rx_fifo_source_first = __main___uart_rx_fifo_fifo_out_first;
assign __main___uart_rx_fifo_source_last = __main___uart_rx_fifo_fifo_out_last;
assign __main___uart_rx_fifo_source_payload_data = __main___uart_rx_fifo_fifo_out_payload_data;
assign __main___uart_rx_fifo_re = __main___uart_rx_fifo_source_ready;
assign __main___uart_rx_fifo_syncfifo_re = (__main___uart_rx_fifo_syncfifo_readable & ((~__main___uart_rx_fifo_readable) | __main___uart_rx_fifo_re));
assign __main___uart_rx_fifo_level1 = (__main___uart_rx_fifo_level0 + __main___uart_rx_fifo_readable);
always @(*) begin
	__main___uart_rx_fifo_wrport_adr <= 4'd0;
	if (__main___uart_rx_fifo_replace) begin
		__main___uart_rx_fifo_wrport_adr <= (__main___uart_rx_fifo_produce - 1'd1);
	end else begin
		__main___uart_rx_fifo_wrport_adr <= __main___uart_rx_fifo_produce;
	end
end
assign __main___uart_rx_fifo_wrport_dat_w = __main___uart_rx_fifo_syncfifo_din;
assign __main___uart_rx_fifo_wrport_we = (__main___uart_rx_fifo_syncfifo_we & (__main___uart_rx_fifo_syncfifo_writable | __main___uart_rx_fifo_replace));
assign __main___uart_rx_fifo_do_read = (__main___uart_rx_fifo_syncfifo_readable & __main___uart_rx_fifo_syncfifo_re);
assign __main___uart_rx_fifo_rdport_adr = __main___uart_rx_fifo_consume;
assign __main___uart_rx_fifo_syncfifo_dout = __main___uart_rx_fifo_rdport_dat_r;
assign __main___uart_rx_fifo_rdport_re = __main___uart_rx_fifo_do_read;
assign __main___uart_rx_fifo_syncfifo_writable = (__main___uart_rx_fifo_level0 != 5'd16);
assign __main___uart_rx_fifo_syncfifo_readable = (__main___uart_rx_fifo_level0 != 1'd0);
assign __main___timer_zero_trigger = (__main___timer_value != 1'd0);
assign __main___timer_zero0 = __main___timer_zero_status;
assign __main___timer_zero1 = __main___timer_zero_pending;
always @(*) begin
	__main___timer_zero_clear <= 1'd0;
	if ((__main___timer_pending_re & __main___timer_pending_r)) begin
		__main___timer_zero_clear <= 1'd1;
	end
end
assign __main___timer_irq = (__main___timer_pending_status & __main___timer_enable_storage);
assign __main___timer_zero_status = __main___timer_zero_trigger;
assign sys_rst = cpu_reset;
assign app1_rst = cpu_reset;
assign __main___clkin = clk100;
assign sys_clk = __main___clkout_buf0;
assign app1_clk = __main___clkout_buf1;
assign __main___SW_REG_status = __main___SW_REG_WIRE;
assign __main___switchIRQ_trigger = (__main___IRQ == 1'd1);
assign builder_switchIRQ0 = __main___switchIRQ_status;
assign builder_switchIRQ1 = __main___switchIRQ_pending;
always @(*) begin
	__main___switchIRQ_clear <= 1'd0;
	if ((builder_pending_re & builder_pending_r)) begin
		__main___switchIRQ_clear <= 1'd1;
	end
end
assign __main___irq = (builder_pending_status & builder_enable_storage);
assign __main___switchIRQ_status = __main___switchIRQ_trigger;
always @(*) begin
	builder_basesoc_wishbone_ack <= 1'd0;
	builder_basesoc_wishbone_dat_r <= 32'd0;
	builder_next_state <= 1'd0;
	builder_basesoc_adr <= 14'd0;
	builder_basesoc_we <= 1'd0;
	builder_basesoc_dat_w <= 32'd0;
	builder_next_state <= builder_state;
	case (builder_state)
		1'd1: begin
			builder_basesoc_wishbone_ack <= 1'd1;
			builder_basesoc_wishbone_dat_r <= builder_basesoc_dat_r;
			builder_next_state <= 1'd0;
		end
		default: begin
			builder_basesoc_dat_w <= builder_basesoc_wishbone_dat_w;
			if ((builder_basesoc_wishbone_cyc & builder_basesoc_wishbone_stb)) begin
				builder_basesoc_adr <= builder_basesoc_wishbone_adr;
				builder_basesoc_we <= (builder_basesoc_wishbone_we & (builder_basesoc_wishbone_sel != 1'd0));
				builder_next_state <= 1'd1;
			end
		end
	endcase
end
assign builder_shared_adr = builder_array_muxed0;
assign builder_shared_dat_w = builder_array_muxed1;
assign builder_shared_sel = builder_array_muxed2;
assign builder_shared_cyc = builder_array_muxed3;
assign builder_shared_stb = builder_array_muxed4;
assign builder_shared_we = builder_array_muxed5;
assign builder_shared_cti = builder_array_muxed6;
assign builder_shared_bte = builder_array_muxed7;
assign __main___cpu_ibus_dat_r = builder_shared_dat_r;
assign __main___cpu_dbus_dat_r = builder_shared_dat_r;
assign __main___cpu_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign __main___cpu_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign __main___cpu_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign __main___cpu_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {__main___cpu_dbus_cyc, __main___cpu_ibus_cyc};
always @(*) begin
	builder_slave_sel <= 4'd0;
	builder_slave_sel[0] <= (builder_shared_adr[29:13] == 1'd0);
	builder_slave_sel[1] <= (builder_shared_adr[29:11] == 16'd32768);
	builder_slave_sel[2] <= (builder_shared_adr[29:12] == 17'd65536);
	builder_slave_sel[3] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign __main___ram_bus_adr = builder_shared_adr;
assign __main___ram_bus_dat_w = builder_shared_dat_w;
assign __main___ram_bus_sel = builder_shared_sel;
assign __main___ram_bus_stb = builder_shared_stb;
assign __main___ram_bus_we = builder_shared_we;
assign __main___ram_bus_cti = builder_shared_cti;
assign __main___ram_bus_bte = builder_shared_bte;
assign __main___interface0_ram_bus_adr = builder_shared_adr;
assign __main___interface0_ram_bus_dat_w = builder_shared_dat_w;
assign __main___interface0_ram_bus_sel = builder_shared_sel;
assign __main___interface0_ram_bus_stb = builder_shared_stb;
assign __main___interface0_ram_bus_we = builder_shared_we;
assign __main___interface0_ram_bus_cti = builder_shared_cti;
assign __main___interface0_ram_bus_bte = builder_shared_bte;
assign __main___interface1_ram_bus_adr = builder_shared_adr;
assign __main___interface1_ram_bus_dat_w = builder_shared_dat_w;
assign __main___interface1_ram_bus_sel = builder_shared_sel;
assign __main___interface1_ram_bus_stb = builder_shared_stb;
assign __main___interface1_ram_bus_we = builder_shared_we;
assign __main___interface1_ram_bus_cti = builder_shared_cti;
assign __main___interface1_ram_bus_bte = builder_shared_bte;
assign builder_basesoc_wishbone_adr = builder_shared_adr;
assign builder_basesoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_basesoc_wishbone_sel = builder_shared_sel;
assign builder_basesoc_wishbone_stb = builder_shared_stb;
assign builder_basesoc_wishbone_we = builder_shared_we;
assign builder_basesoc_wishbone_cti = builder_shared_cti;
assign builder_basesoc_wishbone_bte = builder_shared_bte;
assign __main___ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign __main___interface0_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign __main___interface1_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_basesoc_wishbone_cyc = (builder_shared_cyc & builder_slave_sel[3]);
assign builder_shared_err = (((__main___ram_bus_err | __main___interface0_ram_bus_err) | __main___interface1_ram_bus_err) | builder_basesoc_wishbone_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
	builder_shared_dat_r <= 32'd0;
	builder_shared_ack <= 1'd0;
	builder_error <= 1'd0;
	builder_shared_ack <= (((__main___ram_bus_ack | __main___interface0_ram_bus_ack) | __main___interface1_ram_bus_ack) | builder_basesoc_wishbone_ack);
	builder_shared_dat_r <= (((({32{builder_slave_sel_r[0]}} & __main___ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & __main___interface0_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & __main___interface1_ram_bus_dat_r)) | ({32{builder_slave_sel_r[3]}} & builder_basesoc_wishbone_dat_r));
	if (builder_done) begin
		builder_shared_dat_r <= 32'd4294967295;
		builder_shared_ack <= 1'd1;
		builder_error <= 1'd1;
	end
end
assign builder_done = (builder_count == 1'd0);
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 3'd6);
assign builder_csr_bankarray_csrbank0_LED_REG0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_LED_REG0_re <= 1'd0;
	builder_csr_bankarray_csrbank0_LED_REG0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank0_LED_REG0_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_LED_REG0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_SW_REG_r = builder_csr_bankarray_interface0_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_SW_REG_we <= 1'd0;
	builder_csr_bankarray_csrbank0_SW_REG_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank0_SW_REG_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_SW_REG_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_ev_status_r = builder_csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank0_ev_status_we <= 1'd0;
	builder_csr_bankarray_csrbank0_ev_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank0_ev_status_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_ev_status_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_ev_pending_r = builder_csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank0_ev_pending_re <= 1'd0;
	builder_csr_bankarray_csrbank0_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank0_ev_pending_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_ev_pending_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_ev_enable0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank0_ev_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank0_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank0_ev_enable0_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_ev_enable0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_LED_REG0_w = __main___LED_REG_storage[3:0];
assign builder_csr_bankarray_csrbank0_SW_REG_w = __main___SW_REG_status[3:0];
assign __main___SW_REG_we = builder_csr_bankarray_csrbank0_SW_REG_we;
assign builder_status_status = builder_switchIRQ0;
assign builder_csr_bankarray_csrbank0_ev_status_w = builder_status_status;
assign builder_status_we = builder_csr_bankarray_csrbank0_ev_status_we;
assign builder_pending_status = builder_switchIRQ1;
assign builder_csr_bankarray_csrbank0_ev_pending_w = builder_pending_status;
assign builder_pending_we = builder_csr_bankarray_csrbank0_ev_pending_we;
assign builder_switchIRQ2 = builder_enable_storage;
assign builder_csr_bankarray_csrbank0_ev_enable0_w = builder_enable_storage;
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank1_reset0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_reset0_re <= 1'd0;
	builder_csr_bankarray_csrbank1_reset0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank1_reset0_re <= builder_csr_bankarray_interface1_bank_bus_we;
		builder_csr_bankarray_csrbank1_reset0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_scratch0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_scratch0_we <= 1'd0;
	builder_csr_bankarray_csrbank1_scratch0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank1_scratch0_re <= builder_csr_bankarray_interface1_bank_bus_we;
		builder_csr_bankarray_csrbank1_scratch0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_bus_errors_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_bus_errors_we <= 1'd0;
	builder_csr_bankarray_csrbank1_bus_errors_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank1_bus_errors_re <= builder_csr_bankarray_interface1_bank_bus_we;
		builder_csr_bankarray_csrbank1_bus_errors_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_reset0_w = __main___soccontroller_reset_storage;
assign builder_csr_bankarray_csrbank1_scratch0_w = __main___soccontroller_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank1_bus_errors_w = __main___soccontroller_bus_errors_status[31:0];
assign __main___soccontroller_bus_errors_we = builder_csr_bankarray_csrbank1_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 2'd2);
always @(*) begin
	builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (builder_csr_bankarray_sel_r) begin
		builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
	end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 3'd5);
assign builder_csr_bankarray_csrbank2_load0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_load0_re <= 1'd0;
	builder_csr_bankarray_csrbank2_load0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank2_load0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_load0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_reload0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_reload0_we <= 1'd0;
	builder_csr_bankarray_csrbank2_reload0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank2_reload0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_reload0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_en0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_en0_re <= 1'd0;
	builder_csr_bankarray_csrbank2_en0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank2_en0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_en0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_update_value0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_update_value0_we <= 1'd0;
	builder_csr_bankarray_csrbank2_update_value0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank2_update_value0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_update_value0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_value_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_value_we <= 1'd0;
	builder_csr_bankarray_csrbank2_value_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank2_value_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_value_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_status_re <= 1'd0;
	builder_csr_bankarray_csrbank2_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank2_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_ev_status_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
	builder_csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank2_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_ev_pending_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank2_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_ev_enable0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_load0_w = __main___timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank2_reload0_w = __main___timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank2_en0_w = __main___timer_en_storage;
assign builder_csr_bankarray_csrbank2_update_value0_w = __main___timer_update_value_storage;
assign builder_csr_bankarray_csrbank2_value_w = __main___timer_value_status[31:0];
assign __main___timer_value_we = builder_csr_bankarray_csrbank2_value_we;
assign __main___timer_status_status = __main___timer_zero0;
assign builder_csr_bankarray_csrbank2_ev_status_w = __main___timer_status_status;
assign __main___timer_status_we = builder_csr_bankarray_csrbank2_ev_status_we;
assign __main___timer_pending_status = __main___timer_zero1;
assign builder_csr_bankarray_csrbank2_ev_pending_w = __main___timer_pending_status;
assign __main___timer_pending_we = builder_csr_bankarray_csrbank2_ev_pending_we;
assign __main___timer_zero2 = __main___timer_enable_storage;
assign builder_csr_bankarray_csrbank2_ev_enable0_w = __main___timer_enable_storage;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign __main___uart_rxtx_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
	__main___uart_rxtx_we <= 1'd0;
	__main___uart_rxtx_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		__main___uart_rxtx_re <= builder_csr_bankarray_interface3_bank_bus_we;
		__main___uart_rxtx_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_txfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_txfull_re <= 1'd0;
	builder_csr_bankarray_csrbank3_txfull_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank3_txfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_txfull_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_rxempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_rxempty_re <= 1'd0;
	builder_csr_bankarray_csrbank3_rxempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank3_rxempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_rxempty_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_ev_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_status_we <= 1'd0;
	builder_csr_bankarray_csrbank3_ev_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank3_ev_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_ev_status_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_ev_pending_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
	builder_csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank3_ev_pending_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_ev_pending_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_ev_enable0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
	builder_csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank3_ev_enable0_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_ev_enable0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_txempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_txempty_we <= 1'd0;
	builder_csr_bankarray_csrbank3_txempty_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank3_txempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_txempty_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_rxfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_rxfull_we <= 1'd0;
	builder_csr_bankarray_csrbank3_rxfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank3_rxfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_rxfull_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_txfull_w = __main___uart_txfull_status;
assign __main___uart_txfull_we = builder_csr_bankarray_csrbank3_txfull_we;
assign builder_csr_bankarray_csrbank3_rxempty_w = __main___uart_rxempty_status;
assign __main___uart_rxempty_we = builder_csr_bankarray_csrbank3_rxempty_we;
always @(*) begin
	__main___uart_status_status <= 2'd0;
	__main___uart_status_status[0] <= __main___uart_tx0;
	__main___uart_status_status[1] <= __main___uart_rx0;
end
assign builder_csr_bankarray_csrbank3_ev_status_w = __main___uart_status_status[1:0];
assign __main___uart_status_we = builder_csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
	__main___uart_pending_status <= 2'd0;
	__main___uart_pending_status[0] <= __main___uart_tx1;
	__main___uart_pending_status[1] <= __main___uart_rx1;
end
assign builder_csr_bankarray_csrbank3_ev_pending_w = __main___uart_pending_status[1:0];
assign __main___uart_pending_we = builder_csr_bankarray_csrbank3_ev_pending_we;
assign __main___uart_tx2 = __main___uart_enable_storage[0];
assign __main___uart_rx2 = __main___uart_enable_storage[1];
assign builder_csr_bankarray_csrbank3_ev_enable0_w = __main___uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank3_txempty_w = __main___uart_txempty_status;
assign __main___uart_txempty_we = builder_csr_bankarray_csrbank3_txempty_we;
assign builder_csr_bankarray_csrbank3_rxfull_w = __main___uart_rxfull_status;
assign __main___uart_rxfull_we = builder_csr_bankarray_csrbank3_rxfull_we;
assign builder_csr_interconnect_adr = builder_basesoc_adr;
assign builder_csr_interconnect_we = builder_basesoc_we;
assign builder_csr_interconnect_dat_w = builder_basesoc_dat_w;
assign builder_basesoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
	builder_array_muxed0 <= 30'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed0 <= __main___cpu_ibus_adr;
		end
		default: begin
			builder_array_muxed0 <= __main___cpu_dbus_adr;
		end
	endcase
end
always @(*) begin
	builder_array_muxed1 <= 32'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed1 <= __main___cpu_ibus_dat_w;
		end
		default: begin
			builder_array_muxed1 <= __main___cpu_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	builder_array_muxed2 <= 4'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed2 <= __main___cpu_ibus_sel;
		end
		default: begin
			builder_array_muxed2 <= __main___cpu_dbus_sel;
		end
	endcase
end
always @(*) begin
	builder_array_muxed3 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed3 <= __main___cpu_ibus_cyc;
		end
		default: begin
			builder_array_muxed3 <= __main___cpu_dbus_cyc;
		end
	endcase
end
always @(*) begin
	builder_array_muxed4 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed4 <= __main___cpu_ibus_stb;
		end
		default: begin
			builder_array_muxed4 <= __main___cpu_dbus_stb;
		end
	endcase
end
always @(*) begin
	builder_array_muxed5 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed5 <= __main___cpu_ibus_we;
		end
		default: begin
			builder_array_muxed5 <= __main___cpu_dbus_we;
		end
	endcase
end
always @(*) begin
	builder_array_muxed6 <= 3'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed6 <= __main___cpu_ibus_cti;
		end
		default: begin
			builder_array_muxed6 <= __main___cpu_dbus_cti;
		end
	endcase
end
always @(*) begin
	builder_array_muxed7 <= 2'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed7 <= __main___cpu_ibus_bte;
		end
		default: begin
			builder_array_muxed7 <= __main___cpu_dbus_bte;
		end
	endcase
end
assign __main___rx_rx = builder_regs1;

always @(posedge sys_clk) begin
	if ((__main___soccontroller_bus_errors != 32'd4294967295)) begin
		if (__main___soccontroller_bus_error) begin
			__main___soccontroller_bus_errors <= (__main___soccontroller_bus_errors + 1'd1);
		end
	end
	__main___ram_bus_ack <= 1'd0;
	if (((__main___ram_bus_cyc & __main___ram_bus_stb) & (~__main___ram_bus_ack))) begin
		__main___ram_bus_ack <= 1'd1;
	end
	__main___interface0_ram_bus_ack <= 1'd0;
	if (((__main___interface0_ram_bus_cyc & __main___interface0_ram_bus_stb) & (~__main___interface0_ram_bus_ack))) begin
		__main___interface0_ram_bus_ack <= 1'd1;
	end
	__main___interface1_ram_bus_ack <= 1'd0;
	if (((__main___interface1_ram_bus_cyc & __main___interface1_ram_bus_stb) & (~__main___interface1_ram_bus_ack))) begin
		__main___interface1_ram_bus_ack <= 1'd1;
	end
	{__main___tx_tick, __main___tx_phase} <= 22'd3534144;
	if (__main___tx_enable) begin
		{__main___tx_tick, __main___tx_phase} <= (__main___tx_phase + 22'd3534144);
	end
	builder_rs232phytx_state <= builder_rs232phytx_next_state;
	if (__main___tx_count_rs232phytx_next_value_ce0) begin
		__main___tx_count <= __main___tx_count_rs232phytx_next_value0;
	end
	if (__main___serial_tx_rs232phytx_next_value_ce1) begin
		serial_tx <= __main___serial_tx_rs232phytx_next_value1;
	end
	if (__main___tx_data_rs232phytx_next_value_ce2) begin
		__main___tx_data <= __main___tx_data_rs232phytx_next_value2;
	end
	__main___rx_rx_d <= __main___rx_rx;
	{__main___rx_tick, __main___rx_phase} <= 32'd2147483648;
	if (__main___rx_enable) begin
		{__main___rx_tick, __main___rx_phase} <= (__main___rx_phase + 22'd3534144);
	end
	builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
	if (__main___rx_count_rs232phyrx_next_value_ce0) begin
		__main___rx_count <= __main___rx_count_rs232phyrx_next_value0;
	end
	if (__main___rx_data_rs232phyrx_next_value_ce1) begin
		__main___rx_data <= __main___rx_data_rs232phyrx_next_value1;
	end
	if (__main___uart_tx_clear) begin
		__main___uart_tx_pending <= 1'd0;
	end
	__main___uart_tx_trigger_d <= __main___uart_tx_trigger;
	if (((~__main___uart_tx_trigger) & __main___uart_tx_trigger_d)) begin
		__main___uart_tx_pending <= 1'd1;
	end
	if (__main___uart_rx_clear) begin
		__main___uart_rx_pending <= 1'd0;
	end
	__main___uart_rx_trigger_d <= __main___uart_rx_trigger;
	if (((~__main___uart_rx_trigger) & __main___uart_rx_trigger_d)) begin
		__main___uart_rx_pending <= 1'd1;
	end
	if (__main___uart_tx_fifo_syncfifo_re) begin
		__main___uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (__main___uart_tx_fifo_re) begin
			__main___uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((__main___uart_tx_fifo_syncfifo_we & __main___uart_tx_fifo_syncfifo_writable) & (~__main___uart_tx_fifo_replace))) begin
		__main___uart_tx_fifo_produce <= (__main___uart_tx_fifo_produce + 1'd1);
	end
	if (__main___uart_tx_fifo_do_read) begin
		__main___uart_tx_fifo_consume <= (__main___uart_tx_fifo_consume + 1'd1);
	end
	if (((__main___uart_tx_fifo_syncfifo_we & __main___uart_tx_fifo_syncfifo_writable) & (~__main___uart_tx_fifo_replace))) begin
		if ((~__main___uart_tx_fifo_do_read)) begin
			__main___uart_tx_fifo_level0 <= (__main___uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (__main___uart_tx_fifo_do_read) begin
			__main___uart_tx_fifo_level0 <= (__main___uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (__main___uart_rx_fifo_syncfifo_re) begin
		__main___uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (__main___uart_rx_fifo_re) begin
			__main___uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((__main___uart_rx_fifo_syncfifo_we & __main___uart_rx_fifo_syncfifo_writable) & (~__main___uart_rx_fifo_replace))) begin
		__main___uart_rx_fifo_produce <= (__main___uart_rx_fifo_produce + 1'd1);
	end
	if (__main___uart_rx_fifo_do_read) begin
		__main___uart_rx_fifo_consume <= (__main___uart_rx_fifo_consume + 1'd1);
	end
	if (((__main___uart_rx_fifo_syncfifo_we & __main___uart_rx_fifo_syncfifo_writable) & (~__main___uart_rx_fifo_replace))) begin
		if ((~__main___uart_rx_fifo_do_read)) begin
			__main___uart_rx_fifo_level0 <= (__main___uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (__main___uart_rx_fifo_do_read) begin
			__main___uart_rx_fifo_level0 <= (__main___uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (__main___timer_en_storage) begin
		if ((__main___timer_value == 1'd0)) begin
			__main___timer_value <= __main___timer_reload_storage;
		end else begin
			__main___timer_value <= (__main___timer_value - 1'd1);
		end
	end else begin
		__main___timer_value <= __main___timer_load_storage;
	end
	if (__main___timer_update_value_re) begin
		__main___timer_value_status <= __main___timer_value;
	end
	if (__main___timer_zero_clear) begin
		__main___timer_zero_pending <= 1'd0;
	end
	__main___timer_zero_trigger_d <= __main___timer_zero_trigger;
	if (((~__main___timer_zero_trigger) & __main___timer_zero_trigger_d)) begin
		__main___timer_zero_pending <= 1'd1;
	end
	if (__main___switchIRQ_clear) begin
		__main___switchIRQ_pending <= 1'd0;
	end
	__main___switchIRQ_trigger_d <= __main___switchIRQ_trigger;
	if ((__main___switchIRQ_trigger & (~__main___switchIRQ_trigger_d))) begin
		__main___switchIRQ_pending <= 1'd1;
	end
	builder_state <= builder_next_state;
	case (builder_grant)
		1'd0: begin
			if ((~builder_request[0])) begin
				if (builder_request[1]) begin
					builder_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~builder_request[1])) begin
				if (builder_request[0]) begin
					builder_grant <= 1'd0;
				end
			end
		end
	endcase
	builder_slave_sel_r <= builder_slave_sel;
	if (builder_wait) begin
		if ((~builder_done)) begin
			builder_count <= (builder_count - 1'd1);
		end
	end else begin
		builder_count <= 20'd1000000;
	end
	builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank0_sel) begin
		case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_LED_REG0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_SW_REG_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_ev_status_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_ev_pending_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_ev_enable0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank0_LED_REG0_re) begin
		__main___LED_REG_storage[3:0] <= builder_csr_bankarray_csrbank0_LED_REG0_r;
	end
	__main___LED_REG_re <= builder_csr_bankarray_csrbank0_LED_REG0_re;
	__main___SW_REG_re <= builder_csr_bankarray_csrbank0_SW_REG_re;
	builder_status_re <= builder_csr_bankarray_csrbank0_ev_status_re;
	if (builder_csr_bankarray_csrbank0_ev_pending_re) begin
		builder_pending_r <= builder_csr_bankarray_csrbank0_ev_pending_r;
	end
	builder_pending_re <= builder_csr_bankarray_csrbank0_ev_pending_re;
	if (builder_csr_bankarray_csrbank0_ev_enable0_re) begin
		builder_enable_storage <= builder_csr_bankarray_csrbank0_ev_enable0_r;
	end
	builder_enable_re <= builder_csr_bankarray_csrbank0_ev_enable0_re;
	builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank1_sel) begin
		case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_reset0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_scratch0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_bus_errors_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank1_reset0_re) begin
		__main___soccontroller_reset_storage <= builder_csr_bankarray_csrbank1_reset0_r;
	end
	__main___soccontroller_reset_re <= builder_csr_bankarray_csrbank1_reset0_re;
	if (builder_csr_bankarray_csrbank1_scratch0_re) begin
		__main___soccontroller_scratch_storage[31:0] <= builder_csr_bankarray_csrbank1_scratch0_r;
	end
	__main___soccontroller_scratch_re <= builder_csr_bankarray_csrbank1_scratch0_re;
	__main___soccontroller_bus_errors_re <= builder_csr_bankarray_csrbank1_bus_errors_re;
	builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
	builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank2_sel) begin
		case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_load0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_reload0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_en0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_update_value0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_value_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_status_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_pending_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_enable0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank2_load0_re) begin
		__main___timer_load_storage[31:0] <= builder_csr_bankarray_csrbank2_load0_r;
	end
	__main___timer_load_re <= builder_csr_bankarray_csrbank2_load0_re;
	if (builder_csr_bankarray_csrbank2_reload0_re) begin
		__main___timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank2_reload0_r;
	end
	__main___timer_reload_re <= builder_csr_bankarray_csrbank2_reload0_re;
	if (builder_csr_bankarray_csrbank2_en0_re) begin
		__main___timer_en_storage <= builder_csr_bankarray_csrbank2_en0_r;
	end
	__main___timer_en_re <= builder_csr_bankarray_csrbank2_en0_re;
	if (builder_csr_bankarray_csrbank2_update_value0_re) begin
		__main___timer_update_value_storage <= builder_csr_bankarray_csrbank2_update_value0_r;
	end
	__main___timer_update_value_re <= builder_csr_bankarray_csrbank2_update_value0_re;
	__main___timer_value_re <= builder_csr_bankarray_csrbank2_value_re;
	__main___timer_status_re <= builder_csr_bankarray_csrbank2_ev_status_re;
	if (builder_csr_bankarray_csrbank2_ev_pending_re) begin
		__main___timer_pending_r <= builder_csr_bankarray_csrbank2_ev_pending_r;
	end
	__main___timer_pending_re <= builder_csr_bankarray_csrbank2_ev_pending_re;
	if (builder_csr_bankarray_csrbank2_ev_enable0_re) begin
		__main___timer_enable_storage <= builder_csr_bankarray_csrbank2_ev_enable0_r;
	end
	__main___timer_enable_re <= builder_csr_bankarray_csrbank2_ev_enable0_re;
	builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank3_sel) begin
		case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= __main___uart_rxtx_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txfull_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxempty_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_status_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_pending_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_enable0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txempty_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxfull_w;
			end
		endcase
	end
	__main___uart_txfull_re <= builder_csr_bankarray_csrbank3_txfull_re;
	__main___uart_rxempty_re <= builder_csr_bankarray_csrbank3_rxempty_re;
	__main___uart_status_re <= builder_csr_bankarray_csrbank3_ev_status_re;
	if (builder_csr_bankarray_csrbank3_ev_pending_re) begin
		__main___uart_pending_r[1:0] <= builder_csr_bankarray_csrbank3_ev_pending_r;
	end
	__main___uart_pending_re <= builder_csr_bankarray_csrbank3_ev_pending_re;
	if (builder_csr_bankarray_csrbank3_ev_enable0_re) begin
		__main___uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank3_ev_enable0_r;
	end
	__main___uart_enable_re <= builder_csr_bankarray_csrbank3_ev_enable0_re;
	__main___uart_txempty_re <= builder_csr_bankarray_csrbank3_txempty_re;
	__main___uart_rxfull_re <= builder_csr_bankarray_csrbank3_rxfull_re;
	if (sys_rst) begin
		__main___soccontroller_reset_storage <= 1'd0;
		__main___soccontroller_reset_re <= 1'd0;
		__main___soccontroller_scratch_storage <= 32'd305419896;
		__main___soccontroller_scratch_re <= 1'd0;
		__main___soccontroller_bus_errors_re <= 1'd0;
		__main___soccontroller_bus_errors <= 32'd0;
		__main___ram_bus_ack <= 1'd0;
		__main___interface0_ram_bus_ack <= 1'd0;
		__main___interface1_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd0;
		__main___tx_tick <= 32'd0;
		__main___tx_phase <= 32'd0;
		__main___rx_tick <= 32'd0;
		__main___rx_phase <= 32'd0;
		__main___rx_rx_d <= 1'd0;
		__main___uart_txfull_re <= 1'd0;
		__main___uart_rxempty_re <= 1'd0;
		__main___uart_tx_pending <= 1'd0;
		__main___uart_tx_trigger_d <= 1'd0;
		__main___uart_rx_pending <= 1'd0;
		__main___uart_rx_trigger_d <= 1'd0;
		__main___uart_status_re <= 1'd0;
		__main___uart_pending_re <= 1'd0;
		__main___uart_pending_r <= 2'd0;
		__main___uart_enable_storage <= 2'd0;
		__main___uart_enable_re <= 1'd0;
		__main___uart_txempty_re <= 1'd0;
		__main___uart_rxfull_re <= 1'd0;
		__main___uart_tx_fifo_readable <= 1'd0;
		__main___uart_tx_fifo_level0 <= 5'd0;
		__main___uart_tx_fifo_produce <= 4'd0;
		__main___uart_tx_fifo_consume <= 4'd0;
		__main___uart_rx_fifo_readable <= 1'd0;
		__main___uart_rx_fifo_level0 <= 5'd0;
		__main___uart_rx_fifo_produce <= 4'd0;
		__main___uart_rx_fifo_consume <= 4'd0;
		__main___timer_load_storage <= 32'd0;
		__main___timer_load_re <= 1'd0;
		__main___timer_reload_storage <= 32'd0;
		__main___timer_reload_re <= 1'd0;
		__main___timer_en_storage <= 1'd0;
		__main___timer_en_re <= 1'd0;
		__main___timer_update_value_storage <= 1'd0;
		__main___timer_update_value_re <= 1'd0;
		__main___timer_value_status <= 32'd0;
		__main___timer_value_re <= 1'd0;
		__main___timer_zero_pending <= 1'd0;
		__main___timer_zero_trigger_d <= 1'd0;
		__main___timer_status_re <= 1'd0;
		__main___timer_pending_re <= 1'd0;
		__main___timer_pending_r <= 1'd0;
		__main___timer_enable_storage <= 1'd0;
		__main___timer_enable_re <= 1'd0;
		__main___timer_value <= 32'd0;
		__main___switchIRQ_pending <= 1'd0;
		__main___switchIRQ_trigger_d <= 1'd0;
		__main___LED_REG_storage <= 4'd0;
		__main___LED_REG_re <= 1'd0;
		__main___SW_REG_re <= 1'd0;
		builder_rs232phytx_state <= 1'd0;
		builder_rs232phyrx_state <= 1'd0;
		builder_status_re <= 1'd0;
		builder_pending_re <= 1'd0;
		builder_pending_r <= 1'd0;
		builder_enable_storage <= 1'd0;
		builder_enable_re <= 1'd0;
		builder_grant <= 1'd0;
		builder_slave_sel_r <= 4'd0;
		builder_count <= 20'd1000000;
		builder_csr_bankarray_sel_r <= 1'd0;
		builder_state <= 1'd0;
	end
	builder_regs0 <= serial_rx;
	builder_regs1 <= builder_regs0;
end

reg [31:0] mem[0:5579];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	memdat <= mem[__main___adr];
end

assign __main___dat_r = memdat;

initial begin
	$readmemh("mem.init", mem);
end

reg [31:0] mem_1[0:2047];
reg [10:0] memadr;
always @(posedge sys_clk) begin
	if (__main___sram0_we[0])
		mem_1[__main___sram0_adr][7:0] <= __main___sram0_dat_w[7:0];
	if (__main___sram0_we[1])
		mem_1[__main___sram0_adr][15:8] <= __main___sram0_dat_w[15:8];
	if (__main___sram0_we[2])
		mem_1[__main___sram0_adr][23:16] <= __main___sram0_dat_w[23:16];
	if (__main___sram0_we[3])
		mem_1[__main___sram0_adr][31:24] <= __main___sram0_dat_w[31:24];
	memadr <= __main___sram0_adr;
end

assign __main___sram0_dat_r = mem_1[memadr];

initial begin
	$readmemh("mem_1.init", mem_1);
end

reg [31:0] mem_2[0:4095];
reg [11:0] memadr_1;
always @(posedge sys_clk) begin
	if (__main___sram1_we[0])
		mem_2[__main___sram1_adr][7:0] <= __main___sram1_dat_w[7:0];
	if (__main___sram1_we[1])
		mem_2[__main___sram1_adr][15:8] <= __main___sram1_dat_w[15:8];
	if (__main___sram1_we[2])
		mem_2[__main___sram1_adr][23:16] <= __main___sram1_dat_w[23:16];
	if (__main___sram1_we[3])
		mem_2[__main___sram1_adr][31:24] <= __main___sram1_dat_w[31:24];
	memadr_1 <= __main___sram1_adr;
end

assign __main___sram1_dat_r = mem_2[memadr_1];

initial begin
	$readmemh("mem_2.init", mem_2);
end

reg [7:0] mem_3[0:38];
reg [5:0] memadr_2;
always @(posedge sys_clk) begin
	memadr_2 <= builder_csr_bankarray_adr;
end

assign builder_csr_bankarray_dat_r = mem_3[memadr_2];

initial begin
	$readmemh("mem_3.init", mem_3);
end

reg [9:0] storage[0:15];
reg [9:0] memdat_1;
reg [9:0] memdat_2;
always @(posedge sys_clk) begin
	if (__main___uart_tx_fifo_wrport_we)
		storage[__main___uart_tx_fifo_wrport_adr] <= __main___uart_tx_fifo_wrport_dat_w;
	memdat_1 <= storage[__main___uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (__main___uart_tx_fifo_rdport_re)
		memdat_2 <= storage[__main___uart_tx_fifo_rdport_adr];
end

assign __main___uart_tx_fifo_wrport_dat_r = memdat_1;
assign __main___uart_tx_fifo_rdport_dat_r = memdat_2;

reg [9:0] storage_1[0:15];
reg [9:0] memdat_3;
reg [9:0] memdat_4;
always @(posedge sys_clk) begin
	if (__main___uart_rx_fifo_wrport_we)
		storage_1[__main___uart_rx_fifo_wrport_adr] <= __main___uart_rx_fifo_wrport_dat_w;
	memdat_3 <= storage_1[__main___uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (__main___uart_rx_fifo_rdport_re)
		memdat_4 <= storage_1[__main___uart_rx_fifo_rdport_adr];
end

assign __main___uart_rx_fifo_wrport_dat_r = memdat_3;
assign __main___uart_rx_fifo_rdport_dat_r = memdat_4;

BUFG BUFG(
	.I(__main___clkout0),
	.O(__main___clkout_buf0)
);

BUFG BUFG_1(
	.I(__main___clkout1),
	.O(__main___clkout_buf1)
);

gpio gpio(
	.clk(__main___CLK),
	.led_reg(__main___LED_REG_storage),
	.rst(__main___RST),
	.sw(__main___SW),
	.irq(__main___IRQ),
	.led(__main___LED),
	.sw_reg(__main___SW_REG_WIRE)
);

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(__main___cpu_dbus_ack),
	.dBusWishbone_DAT_MISO(__main___cpu_dbus_dat_r),
	.dBusWishbone_ERR(__main___cpu_dbus_err),
	.externalInterruptArray(__main___cpu_interrupt),
	.externalResetVector(__main___vexriscv),
	.iBusWishbone_ACK(__main___cpu_ibus_ack),
	.iBusWishbone_DAT_MISO(__main___cpu_ibus_dat_r),
	.iBusWishbone_ERR(__main___cpu_ibus_err),
	.reset((sys_rst | __main___cpu_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(__main___cpu_dbus_adr),
	.dBusWishbone_BTE(__main___cpu_dbus_bte),
	.dBusWishbone_CTI(__main___cpu_dbus_cti),
	.dBusWishbone_CYC(__main___cpu_dbus_cyc),
	.dBusWishbone_DAT_MOSI(__main___cpu_dbus_dat_w),
	.dBusWishbone_SEL(__main___cpu_dbus_sel),
	.dBusWishbone_STB(__main___cpu_dbus_stb),
	.dBusWishbone_WE(__main___cpu_dbus_we),
	.iBusWishbone_ADR(__main___cpu_ibus_adr),
	.iBusWishbone_BTE(__main___cpu_ibus_bte),
	.iBusWishbone_CTI(__main___cpu_ibus_cti),
	.iBusWishbone_CYC(__main___cpu_ibus_cyc),
	.iBusWishbone_DAT_MOSI(__main___cpu_ibus_dat_w),
	.iBusWishbone_SEL(__main___cpu_ibus_sel),
	.iBusWishbone_STB(__main___cpu_ibus_stb),
	.iBusWishbone_WE(__main___cpu_ibus_we)
);

FD FD(
	.C(__main___clkin),
	.D(__main___reset),
	.Q(builder_reset0)
);

FD FD_1(
	.C(__main___clkin),
	.D(builder_reset0),
	.Q(builder_reset1)
);

FD FD_2(
	.C(__main___clkin),
	.D(builder_reset1),
	.Q(builder_reset2)
);

FD FD_3(
	.C(__main___clkin),
	.D(builder_reset2),
	.Q(builder_reset3)
);

FD FD_4(
	.C(__main___clkin),
	.D(builder_reset3),
	.Q(builder_reset4)
);

FD FD_5(
	.C(__main___clkin),
	.D(builder_reset4),
	.Q(builder_reset5)
);

FD FD_6(
	.C(__main___clkin),
	.D(builder_reset5),
	.Q(builder_reset6)
);

FD FD_7(
	.C(__main___clkin),
	.D(builder_reset6),
	.Q(builder_reset7)
);

MMCME2_ADV #(
	.BANDWIDTH("OPTIMIZED"),
	.CLKFBOUT_MULT_F(4'd12),
	.CLKIN1_PERIOD(10.0),
	.CLKOUT0_DIVIDE_F(8.5),
	.CLKOUT0_PHASE(1'd0),
	.CLKOUT1_DIVIDE(7'd85),
	.CLKOUT1_PHASE(1'd0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01)
) MMCME2_ADV (
	.CLKFBIN(builder_mmcm_fb),
	.CLKIN1(__main___clkin),
	.RST(builder_reset7),
	.CLKFBOUT(builder_mmcm_fb),
	.CLKOUT0(__main___clkout0),
	.CLKOUT1(__main___clkout1),
	.LOCKED(__main___locked)
);

endmodule
